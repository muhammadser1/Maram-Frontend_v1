// BookingForm.jsx
import React, { useMemo, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "../styles/BookingForm.css";

// Auto-switch API: localhost in dev, Render in prod
const API_URL =
    window.location.hostname === "localhost"
        ? "http://localhost:8000"
        : "https://maram-classmanager-backend.onrender.com";

/* ---------- time & hours helpers ---------- */
const TIME_START_HOUR = 10;   // 10:00
const TIME_END_HOUR = 22;   // 22:00 (inclusive)

const buildTimeSlots = (startH, endH) => {
    const out = [];
    for (let h = startH; h <= endH; h++) {
        const HH = String(h).padStart(2, "0");
        out.push(`${HH}:00`);
        if (h !== endH) out.push(`${HH}:30`);
    }
    return out;
};
const TIME_SLOTS = buildTimeSlots(TIME_START_HOUR, TIME_END_HOUR);

const HOURS_OPTIONS = [
    { label: "╪│╪з╪╣╪й ┘И╪з╪н╪п╪й (1:00)", value: 1.0 },
    { label: "╪│╪з╪╣╪й ┘И┘Ж╪╡┘Б (1:30)", value: 1.5 },
    { label: "╪│╪з╪╣╪к╪з┘Ж (2:00)", value: 2.0 },
    { label: "╪│╪з╪╣╪к╪з┘Ж ┘И┘Ж╪╡┘Б (2:30)", value: 2.5 },
    { label: "╪л┘Д╪з╪л ╪│╪з╪╣╪з╪к (3:00)", value: 3.0 },
    { label: "╪л┘Д╪з╪л ╪│╪з╪╣╪з╪к ┘И┘Ж╪╡┘Б (3:30)", value: 3.5 },
    { label: "╪г╪▒╪и╪╣ ╪│╪з╪╣╪з╪к (4:00)", value: 4.0 },
];

export default function BookingForm() {
    const navigate = useNavigate();
    const today = useMemo(() => new Date().toISOString().split("T")[0], []);
    const [loading, setLoading] = useState(false);
    const [errorMsg, setErrorMsg] = useState("");

    // UI model
    const [formData, setFormData] = useState({
        parentName: "",
        phone: "",
        subject: "",
        ageLevel: "",
        lessonDate: today,
        lessonTime: "",
        hours: "",
        notes: "",
        lessonType: "individual", // "individual" | "group"
        studentName: "",          // for individual
        students: ["", ""],       // for group; ensure at least 2
    });

    const isGroup = formData.lessonType === "group";

    // -------- handlers --------
    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === "lessonType") {
            setFormData((p) => ({
                ...p,
                lessonType: value,
                studentName: value === "individual" ? p.studentName || "" : "",
                students: value === "group" ? (p.students?.length ? p.students : ["", ""]) : ["", ""],
            }));
            return;
        }
        setFormData((p) => ({ ...p, [name]: value }));
    };

    // group students handlers
    const addStudent = () => setFormData((p) => ({ ...p, students: [...(p.students || []), ""] }));
    const removeStudent = (idx) =>
        setFormData((p) => {
            const next = [...p.students];
            next.splice(idx, 1);
            return { ...p, students: next };
        });
    const changeStudent = (idx, value) =>
        setFormData((p) => {
            const next = [...(p.students || [])];
            next[idx] = value;
            return { ...p, students: next };
        });

    // -------- submit --------
    const handleSubmit = async (e) => {
        e.preventDefault();
        setErrorMsg("");

        // basic validations (inline)
        if (!formData.phone) return setErrorMsg("тЪая╕П ╪г╪п╪о┘Д ╪▒┘В┘Е ╪з┘Д┘З╪з╪к┘Б.");
        if (!formData.subject) return setErrorMsg("тЪая╕П ╪з╪о╪к╪▒ ╪з┘Д┘Е╪з╪п╪й.");
        if (!formData.ageLevel) return setErrorMsg("тЪая╕П ╪з╪о╪к╪▒ ╪з┘Д┘Е╪▒╪н┘Д╪й ╪з┘Д╪п╪▒╪з╪│┘К╪й.");
        if (!formData.lessonDate) return setErrorMsg("тЪая╕П ╪з╪о╪к╪▒ ╪к╪з╪▒┘К╪о ╪з┘Д╪п╪▒╪│.");
        if (!formData.lessonTime) return setErrorMsg("тЪая╕П ╪з╪о╪к╪▒ ┘И┘В╪к ╪з┘Д╪п╪▒╪│.");
        if (!formData.hours) return setErrorMsg("тЪая╕П ╪з╪о╪к╪▒ ╪╣╪п╪п ╪з┘Д╪│╪з╪╣╪з╪к.");

        // students validation + mapping
        let students = [];
        if (isGroup) {
            const cleaned = (formData.students || []).map((s) => s.trim()).filter(Boolean);
            if (cleaned.length < 2) return setErrorMsg("тЪая╕П ┘Д┘Д╪п╪▒╪│ ╪з┘Д╪м┘Е╪з╪╣┘К╪М ┘К╪м╪и ╪е╪п╪о╪з┘Д ╪з╪│┘Е┘К┘Ж ╪╣┘Д┘Й ╪з┘Д╪г┘В┘Д.");
            students = cleaned;
        } else {
            const name = (formData.studentName || "").trim();
            if (!name) return setErrorMsg("тЪая╕П ╪г╪п╪о┘Д ╪з╪│┘Е ╪з┘Д╪╖╪з┘Д╪и.");
            students = [name];
        }

        // payload for backend
        const payload = {
            parentName: formData.parentName || undefined,
            phone: formData.phone,
            subject: formData.subject,
            ageLevel: formData.ageLevel,
            lessonDate: formData.lessonDate,
            lessonTime: formData.lessonTime,
            hours: Number(formData.hours),
            notes: formData.notes || undefined,
            lessonType: formData.lessonType,
            students,
        };

        try {
            setLoading(true);
            await axios.post(`${API_URL}/booking/`, payload, {
                headers: { "Content-Type": "application/json" },
            });

            // persist once so refresh on success page still shows details
            sessionStorage.setItem("lastBooking", JSON.stringify(payload));

            // navigate to your requested path: /BookingSuccess (capital B)
            navigate("/BookingSuccess", { state: { booking: payload } });
        } catch (err) {
            console.error(err);
            setErrorMsg("тЭМ ╪к╪╣╪░┘С╪▒ ╪е╪▒╪│╪з┘Д ╪з┘Д╪╖┘Д╪и. ╪н╪з┘И┘Д ┘Е╪▒╪й ╪г╪о╪▒┘Й ┘Д╪з╪н┘В╪з┘Л.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="form-container" dir="rtl">
            <h2>ЁЯУЪ ╪н╪м╪▓ ╪п╪▒╪│</h2>
            <p>╪з┘Е┘Д╪г ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪к╪з┘Д┘К╪й ┘Д╪е╪к┘Е╪з┘Е ╪╣┘Е┘Д┘К╪й ╪з┘Д╪н╪м╪▓</p>

            {/* inline error (no alert) */}
            {errorMsg && (
                <div className="bf-alert error" role="alert">
                    {errorMsg}
                </div>
            )}

            <form onSubmit={handleSubmit} className="booking-form">
                {/* Parent & phone */}
                <div className="form-row">
                    <div className="form-group">
                        <label>╪з╪│┘Е ┘И┘Д┘К ╪з┘Д╪г┘Е╪▒ (╪з╪о╪к┘К╪з╪▒┘К)</label>
                        <input
                            type="text"
                            name="parentName"
                            value={formData.parentName}
                            onChange={handleChange}
                            placeholder="╪г╪п╪о┘Д ╪з╪│┘Е ┘И┘Д┘К ╪з┘Д╪г┘Е╪▒"
                        />
                    </div>

                    <div className="form-group">
                        <label>╪▒┘В┘Е ╪з┘Д┘З╪з╪к┘Б</label>
                        <input
                            type="tel"
                            name="phone"
                            value={formData.phone}
                            onChange={handleChange}
                            placeholder="0591234567"
                            required
                        />
                    </div>
                </div>

                {/* Subject & level */}
                <div className="form-row">
                    <div className="form-group">
                        <label>╪з┘Д┘Е╪з╪п╪й ╪з┘Д╪п╪▒╪з╪│┘К╪й</label>
                        <select name="subject" value={formData.subject} onChange={handleChange} required>
                            <option value="">╪з╪о╪к╪▒ ╪з┘Д┘Е╪з╪п╪й</option>
                            <option value="╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й">╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й</option>
                            <option value="╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪и╪▒┘К╪й (╫в╫С╫и╫Щ╫к)">╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪и╪▒┘К╪й (╫в╫С╫и╫Щ╫к)</option>
                            <option value="╪з┘Д┘Д╪║╪й ╪з┘Д╪е┘Ж╪м┘Д┘К╪▓┘К╪й">╪з┘Д┘Д╪║╪й ╪з┘Д╪е┘Ж╪м┘Д┘К╪▓┘К╪й</option>
                            <option value="╪з┘Д╪▒┘К╪з╪╢┘К╪з╪к">╪з┘Д╪▒┘К╪з╪╢┘К╪з╪к</option>

                            <option value="╪з┘Д╪╣┘Д┘И┘Е - ┘Б┘К╪▓┘К╪з╪б">╪з┘Д╪╣┘Д┘И┘Е - ┘Б┘К╪▓┘К╪з╪б (Physics)</option>
                            <option value="╪з┘Д╪╣┘Д┘И┘Е - ┘Г┘К┘Е┘К╪з╪б">╪з┘Д╪╣┘Д┘И┘Е - ┘Г┘К┘Е┘К╪з╪б (Chemistry)</option>
                            <option value="╪з┘Д╪╣┘Д┘И┘Е - ╪г╪н┘К╪з╪б">╪з┘Д╪╣┘Д┘И┘Е - ╪г╪н┘К╪з╪б (Biology ╫С╫Щ╫Х╫Ь╫Х╫Т╫Щ╫Ф)</option>

                            <option value="╪з┘Д╪к╪з╪▒┘К╪о">╪з┘Д╪к╪з╪▒┘К╪о</option>
                            <option value="╪з┘Д╪м╪║╪▒╪з┘Б┘К╪з">╪з┘Д╪м╪║╪▒╪з┘Б┘К╪з</option>
                            <option value="╪з┘Д╪к╪▒╪и┘К╪й ╪з┘Д╪е╪│┘Д╪з┘Е┘К╪й">╪з┘Д╪к╪▒╪и┘К╪й ╪з┘Д╪е╪│┘Д╪з┘Е┘К╪й</option>
                            <option value="╪з┘Д╪к╪▒╪и┘К╪й ╪з┘Д┘Е╪п┘Ж┘К╪й">╪з┘Д╪к╪▒╪и┘К╪й ╪з┘Д┘Е╪п┘Ж┘К╪й</option>
                            <option value="╪з┘Д╪н╪з╪│┘И╪и">╪з┘Д╪н╪з╪│┘И╪и / ╪╣┘Д┘И┘Е ╪з┘Д┘Г┘Е╪и┘К┘И╪к╪▒</option>
                            <option value="┘Е┘И╪з╪п ╪г╪о╪▒┘Й">┘Е┘И╪з╪п ╪г╪о╪▒┘Й</option>
                        </select>
                    </div>

                    <div className="form-group">
                        <label>╪з┘Д┘Е╪▒╪н┘Д╪й ╪з┘Д╪п╪▒╪з╪│┘К╪й</label>
                        <select name="ageLevel" value={formData.ageLevel} onChange={handleChange} required>
                            <option value="">╪з╪о╪к╪▒ ╪з┘Д┘Е╪▒╪н┘Д╪й</option>
                            <option value="╪з╪и╪к╪п╪з╪ж┘К">╪з╪и╪к╪п╪з╪ж┘К</option>
                            <option value="╪е╪╣╪п╪з╪п┘К">╪е╪╣╪п╪з╪п┘К</option>
                            <option value="╪л╪з┘Ж┘И┘К">╪л╪з┘Ж┘И┘К</option>
                        </select>
                    </div>
                </div>

                {/* Date & time */}
                <div className="form-row">
                    <div className="form-group">
                        <label>╪к╪з╪▒┘К╪о ╪з┘Д╪п╪▒╪│</label>
                        <input
                            type="date"
                            name="lessonDate"
                            min={today}
                            value={formData.lessonDate}
                            onChange={handleChange}
                            required
                        />
                    </div>

                    <div className="form-group">
                        <label>┘И┘В╪к ╪з┘Д╪п╪▒╪│</label>
                        <select name="lessonTime" value={formData.lessonTime} onChange={handleChange} required>
                            <option value="">╪з╪о╪к╪▒ ╪з┘Д┘И┘В╪к</option>
                            {TIME_SLOTS.map((t) => (
                                <option key={t} value={t}>
                                    {t}
                                </option>
                            ))}
                        </select>
                    </div>
                </div>

                {/* Type & hours */}
                <div className="form-row">
                    <div className="form-group">
                        <label>┘Ж┘И╪╣ ╪з┘Д╪п╪▒╪│</label>
                        <select name="lessonType" value={formData.lessonType} onChange={handleChange}>
                            <option value="individual">┘Б╪▒╪п┘К</option>
                            <option value="group">┘Е╪м┘Е┘И╪╣╪й</option>
                        </select>
                    </div>

                    <div className="form-group">
                        <label>╪╣╪п╪п ╪з┘Д╪│╪з╪╣╪з╪к</label>
                        <select name="hours" value={formData.hours} onChange={handleChange} required>
                            <option value="">╪з╪о╪к╪▒ ╪з┘Д┘Е╪п╪й</option>
                            {HOURS_OPTIONS.map((opt) => (
                                <option key={opt.value} value={opt.value}>
                                    {opt.label}
                                </option>
                            ))}
                        </select>
                    </div>
                </div>

                {/* Student(s) */}
                {isGroup ? (
                    <div className="form-group">
                        <label>╪з┘Д╪╖┘Д╪з╪и (┘Е╪м┘Е┘И╪╣╪й)</label>
                        <div style={{ display: "grid", gap: 8 }}>
                            {(formData.students || []).map((name, idx) => (
                                <div key={idx} style={{ display: "flex", gap: 8 }}>
                                    <input
                                        type="text"
                                        value={name}
                                        onChange={(e) => changeStudent(idx, e.target.value)}
                                        placeholder={`╪з╪│┘Е ╪з┘Д╪╖╪з┘Д╪и ${idx + 1}`}
                                        className="input"
                                        style={{ flex: 1 }}
                                        required
                                    />
                                    <button
                                        type="button"
                                        onClick={() => removeStudent(idx)}
                                        aria-label="╪н╪░┘Б"
                                        title="╪н╪░┘Б"
                                        style={iconBtn}
                                    >
                                        тИТ
                                    </button>
                                </div>
                            ))}
                            <div>
                                <button type="button" onClick={addStudent} className="btn" style={addBtn}>
                                    + ╪е╪╢╪з┘Б╪й ╪╖╪з┘Д╪и
                                </button>
                            </div>
                            <div className="small" style={{ color: "#64748b" }}>
                                * ┘Д┘Д╪п╪▒╪│ ╪з┘Д╪м┘Е╪з╪╣┘К ┘К╪м╪и ╪е╪п╪о╪з┘Д ╪з╪│┘Е┘К┘Ж ╪╣┘Д┘Й ╪з┘Д╪г┘В┘Д.
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="form-group">
                        <label>╪з╪│┘Е ╪з┘Д╪╖╪з┘Д╪и</label>
                        <input
                            type="text"
                            name="studentName"
                            value={formData.studentName}
                            onChange={handleChange}
                            placeholder="╪г╪п╪о┘Д ╪з╪│┘Е ╪з┘Д╪╖╪з┘Д╪и"
                            required
                        />
                    </div>
                )}

                {/* Notes */}
                <div className="form-group">
                    <label>┘Е┘Д╪з╪н╪╕╪з╪к ╪е╪╢╪з┘Б┘К╪й (╪з╪о╪к┘К╪з╪▒┘К)</label>
                    <textarea
                        name="notes"
                        value={formData.notes}
                        onChange={handleChange}
                        placeholder="╪г┘К ┘Е┘Д╪з╪н╪╕╪з╪к ╪о╪з╪╡╪й ╪г┘И ┘Е╪к╪╖┘Д╪и╪з╪к"
                    />
                </div>

                {/* Submit */}
                <button type="submit" className="submit-btn" disabled={loading}>
                    {loading ? "╪м╪з╪▒┘Н ╪з┘Д╪е╪▒╪│╪з┘Д..." : "╪н╪м╪▓ ╪з┘Д╪п╪▒╪│"}
                </button>
            </form>
        </div>
    );
}

/* minimal button styles kept inline */
const iconBtn = {
    padding: "0 12px",
    borderRadius: 10,
    border: "1px solid #e5e7eb",
    background: "#fff",
    cursor: "pointer",
    fontWeight: 700,
    lineHeight: "36px",
    height: 40,
};
const addBtn = {
    border: 0,
    padding: "10px 14px",
    borderRadius: 12,
    cursor: "pointer",
    fontWeight: 700,
    background: "#2563eb",
    color: "#fff",
    boxShadow: "0 8px 18px rgba(37, 99, 235, .20)",
};
